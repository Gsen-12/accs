# Generated by Django 4.2.20 on 2025-06-04 08:38

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='AnalysisResult',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('vulnerabilities', models.IntegerField()),
                ('errors', models.IntegerField()),
                ('code_smells', models.IntegerField()),
                ('accepted_issues', models.IntegerField()),
                ('duplicates', models.IntegerField()),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('type', models.JSONField(blank=True, default=list)),
                ('severity', models.CharField(max_length=50)),
            ],
            options={
                'db_table': 'code',
            },
        ),
        migrations.CreateModel(
            name='BlacklistedToken',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('token', models.CharField(max_length=255, unique=True)),
                ('blacklisted_at', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='Group',
            fields=[
                ('GroupId', models.IntegerField(primary_key=True, serialize=False)),
                ('school', models.CharField(max_length=255, null=True)),
                ('specialty', models.CharField(max_length=255, null=True)),
                ('college', models.CharField(max_length=255, null=True)),
                ('study_groups', models.CharField(max_length=100, verbose_name='班级名称')),
            ],
        ),
        migrations.CreateModel(
            name='GroupAssignment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('userId', models.CharField(max_length=255)),
                ('study_groups', models.CharField(max_length=255)),
                ('specialty', models.CharField(max_length=255, null=True)),
                ('college', models.CharField(max_length=255, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='IPConfig',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ip_address', models.CharField(max_length=45)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Dify IP 配置',
                'verbose_name_plural': 'Dify IP 配置',
                'db_table': 'dify_ip_config',
                'ordering': ['-updated_at'],
            },
        ),
        migrations.CreateModel(
            name='StuAssignment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('stuId', models.CharField(max_length=100, null=True)),
                ('username', models.CharField(max_length=255)),
                ('groupname', models.CharField(max_length=255)),
            ],
        ),
        migrations.CreateModel(
            name='UserInfo',
            fields=[
                ('userId', models.IntegerField(primary_key=True, serialize=False)),
                ('desc', models.TextField(max_length=500, null=True)),
                ('homePath', models.CharField(max_length=100, null=True)),
                ('avatar', models.CharField(default='avatars/default.png', max_length=255, null=True)),
                ('realName', models.CharField(max_length=100, null=True)),
                ('role_id', models.IntegerField()),
                ('gender', models.SmallIntegerField(choices=[(0, '女'), (1, '男'), (2, '保密')], default=0)),
                ('pub_repo_id', models.CharField(default='ad406967-dd0d-4d5c-949c-cdd62d21b9fe', max_length=255, null=True)),
                ('pri_repo_id', models.CharField(max_length=255, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='UserFile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('file', models.FileField(upload_to='uploads/%Y/%m/%d/')),
                ('is_temporary', models.BooleanField(default=True)),
                ('original_name', models.CharField(max_length=255)),
                ('uploaded_at', models.DateTimeField(auto_now_add=True)),
                ('seafile_file_id', models.CharField(max_length=100, unique=True)),
                ('file_hash', models.CharField(max_length=64)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Roles',
            fields=[
                ('role_id', models.AutoField(primary_key=True, serialize=False)),
                ('role_name', models.CharField(max_length=200, unique=True)),
                ('permissions', models.ManyToManyField(blank=True, related_name='role_set', to='auth.permission', verbose_name='权限集合')),
            ],
            options={
                'verbose_name': '角色',
                'verbose_name_plural': '角色',
            },
        ),
        migrations.CreateModel(
            name='DepartmentMajor',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('department', models.CharField(max_length=100, verbose_name='院系')),
                ('major', models.CharField(max_length=100, verbose_name='专业')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
            ],
            options={
                'verbose_name': '院系-专业',
                'verbose_name_plural': '院系-专业',
                'db_table': 'department_major',
                'unique_together': {('department', 'major')},
            },
        ),
        migrations.CreateModel(
            name='Class',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('class_name', models.CharField(max_length=100, verbose_name='班级名称')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='更新时间')),
                ('department_major', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='accs.departmentmajor', verbose_name='所属院系专业')),
            ],
            options={
                'verbose_name': '班级',
                'db_table': 'class',
                'unique_together': {('class_name', 'department_major')},
            },
        ),
        migrations.CreateModel(
            name='Student',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('student_id', models.CharField(db_index=True, max_length=50, verbose_name='学号')),
                ('name', models.CharField(max_length=50, verbose_name='姓名')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='更新时间')),
                ('class_info', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='students', to='accs.class', verbose_name='班级')),
            ],
            options={
                'verbose_name': '学生',
                'verbose_name_plural': '学生',
                'db_table': 'student',
                'ordering': ['student_id'],
                'unique_together': {('student_id', 'class_info')},
            },
        ),
    ]
